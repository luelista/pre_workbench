{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PRE Workbench Docs","text":""},{"location":"#documentation","title":"Documentation","text":"<p>Installation</p> <p>Getting Started</p> <p>Syntax Reference</p> <p>Key Bindings</p> <p>Plugins and Macros</p> <p>Wireshark Dissector Generator</p>"},{"location":"#features","title":"Features","text":""},{"location":"#data-import","title":"Data import","text":"<ul> <li>Load PCAP files</li> <li>Load binary files, single or a complete folder as package list</li> <li>Load CSV files, using one column as payload (hex/base64 encoded) and the rest as metadata</li> </ul>"},{"location":"#interactive-hexdump","title":"Interactive Hexdump","text":""},{"location":"#heuristics","title":"Heuristics","text":"<ul> <li>Recognize length fields</li> <li>highlight matching length fields for selection</li> <li>Evaluate selection as length field</li> <li>Highlight same content</li> </ul>"},{"location":"#annotations","title":"Annotations","text":"<ul> <li>color and text highlighting of byte sequences</li> <li>Application of the annotations to further packages</li> </ul>"},{"location":"#interactive-documentation-of-procotol-structure-as-grammar","title":"Interactive documentation of procotol structure as grammar","text":"<ul> <li>Description language for binary protocols</li> <li>\"Click-Grammar\": Edit in parallel using code and GUI (see screencast below)</li> <li>Applying a grammar to multiple packages</li> <li>Display of fields from grammar in table</li> </ul> PRE Workbench (Click-Grammar)"},{"location":"#other-features","title":"Other features","text":""},{"location":"#data-inspector","title":"Data inspector","text":"<p>Parse the selection as different data types (Signed/Unsigned Int, Big/Little Endian, ...).</p>"},{"location":"#search-function-and-execution-of-external-tools","title":"Search function and execution of external tools","text":"<p>Search one or multiple buffers for a regular expression, e.g. find all ASCII strings 5 byte or longer.</p>"},{"location":"#project-folder","title":"Project folder","text":"<p>Preferences, widget layout, open files and grammars are stored per project.</p>"},{"location":"#plugin-and-macro-support","title":"Plugin and macro support","text":"<p>Macros can be added at user-level (~/.config) and at project level (.pre_workbench), and some example macros are bundled with the application -- to use macros, click \"View\" &gt; \"Tool Windows\" &gt; \"Macros\". To enable plugin support, configure a plugin directory in the settings dialog. More information in the Plugins and Macros documentation and in the release notes. You can find some example plugins on Github.</p>"},{"location":"#screenshot","title":"Screenshot","text":""},{"location":"code-generation/","title":"Code Generator for Wireshark Dissectors","text":"<p>PRE Workbench provides a proof-of-concept code generator for Wireshark Lua dissectors, which supports a subset  of the protocol grammar language. </p>"},{"location":"code-generation/#supported-features","title":"Supported Features","text":"<p>Types:</p> <ul> <li>struct</li> <li>repeat</li> <li>INT / UINT, STRING, BYTES</li> <li>named reference to other types defined in the same file</li> </ul> <p>Parameters:</p> <ul> <li>INT, UINT: endianness</li> <li>INT, UINT: magic</li> <li>BYTES, INT, UINT: show=\"hex\"</li> <li>repeat: times</li> <li>STRING, BYTES: size</li> </ul> <p>Expressions:</p> <ul> <li>references to INT / UINT fields in the same structure or a parent structure </li> <li>basic maths</li> </ul>"},{"location":"code-generation/#example","title":"Example","text":"<p>Store your protocol grammar either in a project or in a text file <code>my_proto.txt</code>:</p> <pre><code>MyProto struct(endianness=\"&gt;\") {\n    magic UINT32(magic=2864434397, show=\"hex\", color=\"#aa0000\")\n    tlv_count UINT32\n    tlvs repeat(times=(tlv_count)) MyTLV\n}\n\nMyTLV struct(endianness=\"&gt;\") {\n    type UINT16(color=\"#aaaa00\")\n    length UINT16(color=\"#00aa00\")\n    payload BYTES[length](color=\"#0000aa\")\n}\n</code></pre> <p>Call the code generator as follows:</p> <pre><code>prewb_codegen -P path/to/project -o ~/.local/lib/wireshark/plugins/my_proto.lua --dissector-table udp.port:4321\n# or\nprewb_codegen -F my_proto.txt -o ~/.local/lib/wireshark/plugins/my_proto.lua --dissector-table udp.port:4321\n</code></pre> <p>Run Wireshark and load a PCAP file containing protocol samples in a UDP file on port 4321. Alternatively, start a capture on the loopback device, enter filter <code>udp.port==4321</code> and send some samples using netcat:</p> <pre><code># example with 2 TLVs, one without payload\nprintf '\\xAA\\xBB\\xCC\\xDD\\x00\\x00\\x00\\x02\\x00\\x80\\x00\\x03\\x01\\x02\\x03\\x00\\xFF\\x00\\x00' | nc -u localhost 4321\n\n# example with 0 TLVs\nprintf '\\xAA\\xBB\\xCC\\xDD\\x00\\x00\\x00\\x00' | nc -u localhost 4321\n\n# example with wrong magic number\nprintf '\\x00\\x11\\x22\\x33\\x00\\x00\\x00\\x00' | nc -u localhost 4321\n</code></pre> <p></p>"},{"location":"code-generation/#usage","title":"Usage","text":"<p>If you installed PRE Workbench as a Python module, you can run the code generator from the command line, using the command prewb_codegen.</p> <pre><code>usage: prewb_codegen [-h] [-P DIR] [-F FILENAME] [-e GRAMMAR] [-t TYPENAMES] [-d NAME] [-l LANG] [--dissector-table NAME:KEY] [-o FILENAME]\n\nPRE Workbench - Wireshark Dissector Generator\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -P DIR, --project DIR\n                        Grammar definitions from project directory\n  -F FILENAME, --grammar-file FILENAME\n                        Grammar definitions from text file\n  -e GRAMMAR, --grammar-string GRAMMAR\n                        Grammar definitions from command line argument\n  -t TYPENAMES, --only-types TYPENAMES\n                        Generate code only for specified types (comma-separated list)\n  -d NAME, --definition NAME\n                        Name of start grammar definition. Uses first if unspecified\n  -l LANG, --language LANG\n                        Programming language to generate (supported: lua)\n  --dissector-table NAME:KEY\n                        Register the protocol in the given dissector table, under the given key\n  -o FILENAME, --output-file FILENAME\n                        Output filename for generated code (default: \"-\" for stdout)\n</code></pre> <p>In any case, you can run it from the GUI from the Parser menu. The available features are similar in both usage modes. The GUI feature always uses the current project as source for the grammar definitions, as if <code>--project</code> on the CLI.</p> <p>With the \"Only Export These Definitions\" option, you can limit which definitions are exported. Either specify a comma-separated list or use the blue select button.</p> <p>The \"Dissector Table\" option accepts a comma-separated list of dissector table name and pattern, under which the dissector will register itself. Example: \"wtap_encap:149,udp.port:7890\" registers as a raw DLT_USER protocol (DLT: 149) as well as a udp-based protocol (port: 7890). </p>"},{"location":"code-generation/#limitations","title":"Limitations","text":"<p>Our current code generator implementation is limited to a subset of possible PRE Workbench protocol grammars. Only  structures, repetitions, named references to other types and a subset of the built-in types are supported, other types like variant, union and switch could not be implemented yet due to time constraints.  In the expression syntax, only simple expressions consisting of references to fields in the same structure, as well as basic maths, are supported. </p>"},{"location":"extending/","title":"Plugin and Macro Support","text":""},{"location":"extending/#plugins","title":"Plugins","text":"<p>Plugin support is currently experimental and needs to be explicitly enabled.</p> <p>You can load all *.py files from a folder as plugins, by setting a Plugin Directory in the settings dialog,  or by running PRE Workbench with the <code>--plugins-dir=...</code> argument.</p> <p>Plugins can e.g. register custom file types, dock widgets or selection heuristics.</p> <p>The best way to develop plugins is to open your plugin directory as a PyCharm project and configure PyCharm to use the virtualenv in which your PRE Workbench is installed. This way, you get full autocomplete support on internal objects.</p> <ul> <li>Example Plugins</li> </ul>"},{"location":"extending/#macros","title":"Macros","text":""},{"location":"extending/#editing","title":"Editing","text":"<p>To manage macros, use the Macros tool window (View &gt; Tool Windows &gt; Macros). There you can create, import, export, edit and run your macros.</p> <p>Macros can be stored in your user directory (~/.config / %APPDATA%) and in the project database (.pre_workbench). Additionally, some example macros are bundled with the application.</p> <p>You can also copy macros between the different storage locations (builtin, user, project).</p> <p>Macros without a required input object (Input Type = NONE) can be directly run from the tool window by double-clicking.</p> <p></p>"},{"location":"extending/#security-model","title":"Security Model","text":"<p>Macros run in-process, without any sandboxing - they have the same permissions as you running the app.  Therefore macros are TOFE (Trust On First Edit), so if you load a new project file from somewhere else, or import a new macro, you need to first open each macro in the editor, carefully review it, and save it again.  A hash of the code is then stored in your local config, marking it as trusted. It can then be run from the usual locations.</p> <p></p> <p></p>"},{"location":"extending/#data-types","title":"Data Types","text":"<p>Macros can specify a combined \"Macro / Input Type\", and an \"Output Type\". The Output Type is currently ignored. The Input Types are used to specify in which places a macro can be executed. Input to the macro is provided in a variable named <code>input</code>, which is directly  usable in the macro code. Types not listed below are not implemented yet / reserved for future use.</p>"},{"location":"extending/#none","title":"NONE","text":"<p>The macro has no input. It can be executed by double-clicking it in the Macros tool window.</p>"},{"location":"extending/#byte_buffer","title":"BYTE_BUFFER","text":"<p>The macro expects a single ByteBuffer as input. It can be executed by right-clicking a packet in a PacketListWidget or in the context menu of a HexView. If multiple packets are selected, the macro is called repeatedly.</p>"},{"location":"extending/#byte_buffer_list","title":"BYTE_BUFFER_LIST","text":"<p>The macro expects a ByteBufferList as input. It can be executed in the same ways as a BYTE_BUFFER macro, but is only called once.</p>"},{"location":"extending/#byte_array","title":"BYTE_ARRAY","text":"<p>The macro expects a <code>bytes</code> type (sequence of bytes without metadata). It can be executed in the HexView context menu after selecting a byte range.</p>"},{"location":"extending/#data_source","title":"DATA_SOURCE","text":"<p>The macro shows up in the Data Source Type select box in the Data Source Window. It's output (to be placed in the <code>output</code> variable by the macro) will be displayed in the Data Source Window's output widget.</p> <p></p>"},{"location":"extending/#helper-functions","title":"Helper Functions","text":"<p>Without additional imports, the following helper functions are available to macros:</p>"},{"location":"extending/#navigatebrowserurl-str","title":"<code>navigateBrowser(url: str)</code>","text":"<p>Opens the system web browser on the specified URL.</p>"},{"location":"extending/#getclipboardtext-str","title":"<code>getClipboardText() -&gt; str</code>","text":"<p>Returns the text contents of the system clipboard.</p>"},{"location":"extending/#setclipboardtexttext-str","title":"<code>setClipboardText(text: str)</code>","text":"<p>Sets the contents of the system clipboard to the given text.</p>"},{"location":"extending/#showscintilladialogparent-title-content-ok_callback-readonlyfalse-lexernone-help_callbacknone-str-none","title":"<code>showScintillaDialog(parent, title, content, ok_callback, readonly=False, lexer=None, help_callback=None) -&gt; str | None</code>","text":"<p>Example usage for a readonly dialog: <code>showScintillaDialog(MainWindow, \"View results\", my_result_string, None, readonly=True)</code></p> <p>Example usage for an editor dialog: <code>edited_data = showScintillaDialog(MainWindow, \"Edit data\", initial_data, None)</code></p>"},{"location":"extending/#alertmsg-title","title":"<code>alert(msg, title)</code>","text":"<p>Displays a messagebox with the specified message and title.</p>"},{"location":"extending/#confirmmsg-title-bool","title":"<code>confirm(msg, title) -&gt; bool</code>","text":"<p>Displays a messagebox with OK and Cancel buttons. Returns True if the user clicks OK.</p>"},{"location":"extending/#promptmsg-defaulttext-title-str-bool","title":"<code>prompt(msg, defaultText, title) -&gt; (str, bool)</code>","text":"<p>Displays a text input dialog asking the user for one line of text. Returns the entered string and a boolean which is True if the user clicks OK.</p>"},{"location":"extending/#logmsg-args-kwargs","title":"<code>log(msg, *args, **kwargs)</code>","text":"<p>Logs a message with level INFO. The arguments are interpreted as in logging.debug.</p>"},{"location":"extending/#loggingdebug-logginginfo-loggingwarning-loggingerror","title":"<code>logging.debug(), logging.info(), logging.warning(), logging.error()</code>","text":"<p>Python reference</p>"},{"location":"extending/#showlistselectdialoglistoptions-listtupleany-str-selectedoption-title-strselect-parentnone-ok_callbacknone-multiselectfalse-help_callbacknone","title":"<code>showListSelectDialog(listOptions: List[Tuple[Any, str]], selectedOption, title: str=\"Select ...\", parent=None, ok_callback=None, multiselect=False, help_callback=None)</code>","text":""},{"location":"extending/#mainwindow","title":"<code>MainWindow</code>","text":"<p>Reference to the application main window. Can be used as the parent for dialogs.</p>"},{"location":"extending/#zoomobj-bytebuffer-bytebufferlist-listbytebuffer","title":"<code>zoom(obj: ByteBuffer | ByteBufferList | List[ByteBuffer])</code>","text":"<p>Temporarily displays an object in the \"Zoom\" tool window.</p>"},{"location":"extending/#bytebufferbuffer-bytes-metadata-dictstr-any","title":"<code>ByteBuffer(buffer: bytes, metadata: Dict[str, any])</code>","text":"<p>Returns a new ByteBuffer object.</p>"},{"location":"extending/#bytebufferlist","title":"<code>ByteBufferList()</code>","text":"<p>Returns a new ByteBufferList object.</p> <p>Methods: * <code>list.add(obj: ByteBufferList)</code></p> <p>Properties: * <code>list.buffers -&gt; List[ByteBuffer]</code> * <code>list.metadata -&gt; Dict[str, any]</code></p>"},{"location":"extending/#openasuntitledobj-bytebuffer-bytebufferlist-listbytebuffer-str","title":"<code>openAsUntitled(obj: ByteBuffer | ByteBufferList | List[ByteBuffer] | str)</code>","text":"<p>Open a new untitled file with the specified contents. In case of ByteBuffer, a HexFileWindow is opened.  In case of ByteBufferList or List[ByteBuffer], a PcapngFileWindow is opened. In case of str, a TextFileWindow is opened.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#_1","title":"\ud83e\udd84","text":"<p>TBD</p>"},{"location":"getting-started/#video-walkthrough","title":"Video Walkthrough","text":""},{"location":"getting-started/#command-line-interface","title":"Command Line Interface","text":"<p>Although PRE Workbench is mainly a GUI application, there are some command line arguments to the main application, and there is a separate tool to run parsers directly from the command line.</p>"},{"location":"getting-started/#prewb","title":"prewb","text":""},{"location":"getting-started/#usage","title":"Usage","text":"<p>Just run <code>prewb</code> to start the GUI application.</p> <p>Pass a directory path to start with this specific project, or run <code>prewb --choose-project</code> to force the project chooser dialog to appear.</p> <p>If the configuration file got messed up, run <code>prewb --reset-config</code>. Note that this deletes all application-wide configuration. Project-specific configuration will be left alone. To reset these, delete or rename the <code>.pre_workbench</code> file from your project directory.</p> <p>You can also specify various debug options with --log-level, --log-config and --gc-debug.</p> <pre><code>usage: prewb [-h] [--reset-config] [--log-level {TRACE,DEBUG,INFO,WARNING,ERROR}] [--log-config FILE] [--plugins-dir DIR] [--gc-debug] [--choose-project] [DIR]\n\nProtocol Reverse Engineering Workbench\n\npositional arguments:\n  DIR                   Project directory\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --reset-config        Reset the configuration to defaults\n  --log-level {TRACE,DEBUG,INFO,WARNING,ERROR}\n                        Set the log level\n  --log-config FILE     Load detailed logging config from file\n  --plugins-dir DIR     Load all Python files from this folder as plugins\n  --gc-debug            Print debug output from garbage collector\n  --choose-project      Force the project directory chooser to appear, instead of opening the last project\n</code></pre> <p>On Windows, the <code>prewb</code> command runs the application in GUI mode, preventing command line output. To see the log output, use the <code>prewb_c</code> command which runs in console mode.</p>"},{"location":"getting-started/#prewb_parse","title":"prewb_parse","text":""},{"location":"getting-started/#usage_1","title":"Usage","text":"<pre><code>usage: prewb_parse [-h] [-P DIR] [-F FILENAME] [-e GRAMMAR] [-d NAME] [-i FILENAME] [-x HEXSTRING] [--json]\n\nProtocol Reverse Engineering Workbench CLI Parser\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -P DIR, --project DIR\n                        Grammar definitions from project directory\n  -F FILENAME, --grammar-file FILENAME\n                        Grammar definitions from text file\n  -e GRAMMAR, --grammar-string GRAMMAR\n                        Grammar definitions from command line argument\n  -d NAME, --definition NAME\n                        Name of start grammar definition. Uses first if unspecified\n  -i FILENAME, --input-file FILENAME\n                        File to parse\n  -x HEXSTRING, --input-hex HEXSTRING\n                        Hex string to parse\n  --json                Print json output\n</code></pre>"},{"location":"getting-started/#examples","title":"Examples","text":"<pre><code>$ prewb_parse -e \"_ struct {foo UINT8 bar UINT8}\" -x \"1122\"\n{\n    \"foo\": 17,\n    \"bar\": 34\n}\n\n$ prewb_parse -e \"_ repeat UINT8\" -x \"11223344\"\n[\n    17,\n    34,\n    51,\n    68\n]\n</code></pre>"},{"location":"install/","title":"Installing PRE Workbench","text":""},{"location":"install/#downloads","title":"Downloads","text":"<ul> <li>PRE Workbench is available on the Python Package Index as <code>pre_workbench</code>.</li> <li>Pre-built releases are available on Github.</li> </ul>"},{"location":"install/#install-on-macos","title":"Install on macOS","text":""},{"location":"install/#app-bundle","title":"App Bundle","text":"<p>Download PRE Workbench as an application bundle from here. Extract the zip file, right click the <code>PRE Workbench.app</code> and choose \"Open\". The application is not code-signed, therefore you need to allow the execution of untrusted applications in the following dialog.</p>"},{"location":"install/#install-via-pip-intel","title":"Install via pip (Intel)","text":"<p>You need a recent version of pip, the Python package manager. The version supplied with  macOS might not be sufficient. Therefore run <code>sudo pip3 install -U pip</code> first.</p> <p>Then, install the application with <code>sudo pip3 install pre_workbench</code>.</p> <p>Run with <code>prewb</code> or <code>python3 -m pre_workbench</code>.</p> <p>Prebuilt binary wheels exist for macOS 11 on Intel chips. </p>"},{"location":"install/#install-via-pip-m1","title":"Install via pip (M1)","text":"<p>The Qt framework (version 5), which is used by pre_workbench, is not compatible  with M1 Macs. However, you can run the application on the Rosetta compatibility layer.</p> <p>You can do so by creating a copy of <code>Terminal.app</code> (call it something like  <code>Terminal (Rosetta).app</code>), click Get Info in its context menu, and check  the Open using Rosetta checkbox under General.  Afterwards, follow the  instructions for Intel Macs.</p>"},{"location":"install/#install-on-ubuntu","title":"Install on ubuntu","text":"<p>Install dependencies via apt, then install the package via pip.</p> <pre><code>sudo apt install python3-pip qt5-default\nsudo pip3 install pre_workbench\nprewb\n</code></pre>"},{"location":"install/#install-on-windows","title":"Install on Windows","text":"<p>On Windows 10 x64, the application can either be installed via pip, or you can  download a setup.exe from the Github releases page. Other Windows versions are currently untested. Installing via pip has the advantage that the command line utitilies can be used. The setup installs a PyInstaller build which only supports the main GUI appication.</p>"},{"location":"key-bindings/","title":"Key Bindings Reference","text":""},{"location":"key-bindings/#global","title":"Global","text":"Key Action ctrl-O Open file ctrl-shift-O Open project ctrl-R Reload current file ctrl-S Save current file ctrl-shift-S Save current file with new name ctrl-Q Exit"},{"location":"key-bindings/#hex-editor","title":"Hex Editor","text":"Key Action ctrl-A Select all of current buffer ctrl-C Copy selection as undelimited hex string ctrl-shift-C Copy selection as formatted hex dump ctrl-F5 Re-apply grammar ctrl-plus Zoom in ctrl-minus Zoom out ctrl-0 Reset zoom level R, G, Y, L, M, T Annotate with background color (Red, Green, Yellow, bLue, Magenta, Turqoise) X Delete selected annotation ctrl-shift-K Delete all annotations"},{"location":"key-bindings/#code-editor","title":"Code Editor","text":"Key Action ctrl-J Add next occurrence to selection ctrl-shift J Add all occurrences to selection"},{"location":"key-bindings/#grammar-definition-code","title":"Grammar Definition Code","text":"Key Action ctrl-ENTER Apply changes"},{"location":"syntax-reference/","title":"Syntax Reference","text":""},{"location":"syntax-reference/#grammar-files","title":"Grammar Files","text":"<p>A grammar file consists of a map of names to type definitions, in the format <code>name1 definition1 name2 definition2 ...</code>, each element separated by white-space. The following sections explain all available base types from which the type definitions can be assembled.</p> <pre><code>grammar_file: field*\nfield: IDENTIFIER type\ntype: named | struct | repeat | variant | switch | union | bits\n\nparams: (\"(\" [parampair (\",\" parampair)*] \")\")?\nparampair: IDENTIFIER \"=\" value\n</code></pre>"},{"location":"syntax-reference/#example","title":"Example","text":"<p>The following grammar definition defines a simple protocol, with a magic number in the beginning of the packet, followed by repeated TLV (type-length-value) items.</p> <pre><code>\nMyProto struct (endianness=\"&gt;\"){\n    magic UINT32(magic=2864434397, color=\"#aa0000\")\n    tlvs repeat MyTLV\n}\n\nMyTLV struct {\n    header struct {\n        type UINT16(color=\"#aaaa00\")\n        length UINT16(color=\"#00aa00\")\n    }\n    payload BYTES[header.length](color=\"#0000aa\")\n}\n</code></pre> <p>Parsing the following example data, consisting of the magic number and two TLV items, with MyProto from above grammar, gives us the results shown in the screenshot below:</p> <pre><code>00000000: AA BB CC DD 00 DD 00 04  41 41 41 41 00 EE 00 10  ........AAAA....\n00000010: 00 11 22 33 44 55 66 77  88 99 AA BB CC DD EE FF  ..\"3DUfw........\n</code></pre> <p></p>"},{"location":"syntax-reference/#parameters","title":"Parameters","text":"<p>Some parameters are recognized on all types, where the <code>params</code> element is accepted. Other parameters are recognized on  specific types only, but can also be declared on any surrounding container type, causing them to cascade to the children (e.g., declaring <code>endianness</code> on a struct specifies the endianness for all struct elements). </p> parameter type description ignore_errors Boolean If true, all errors which may occur during parsing this element or it's children are ignored. reassemble_into list (Expression or string) store_into list (Expression or string) segment_meta experimental??? hide If specified, this field is hidden from the Grammar Parse Result tree view"},{"location":"syntax-reference/#further-examples","title":"Further Examples","text":"<p>For further examples, have a look at the test cases for the parser  and syntax.</p>"},{"location":"syntax-reference/#type-definitions","title":"Type Definitions","text":""},{"location":"syntax-reference/#named","title":"named","text":"<pre><code>named: IDENTIFIER params\n</code></pre> <p>In any place where a type is expected, a name can be used to reference another type defined in the same file. Many common types of integers, strings, floating-point numbers and network addresses are predefined. For easier adaption, they have the same name as in Wireshark dissectors.</p> <p>This allows for generalization, because the same type can be references in multiple places (e.g. to define a common header shared by many different packet types). It also can make the grammar easier to read, because special cases can be put away at the end of the file, and the nesting depth can be reduced. After the type name, parameters configuring parsing or visualization details can be provided in parentheses. This makes it possible to define more generic types, where e.g. the endianness is left open until the usage.</p> <pre><code>UINT32(endianness=\"&lt;\")\n--&gt; unsigned integer, 4 byte, little endian.\n\nIPv4\n--&gt; IP version 4 address, in binary, in network byte order.\n\nSTRING[32](charset=\"utf-8\")\n--&gt; character string in UTF-8 encoding, 32 bytes long\n\nUINT_STRING(size_len=2, endianness=\"&gt;\", charset=\"utf-8\")\n--&gt; character string in UTF-8 encoding, with an unsigned integer, 2 byte, big endian prefix specifing the string length.\n\nmytype\n--&gt; custom type declared elsewhere\n</code></pre> parameter type description endianness String \"&lt;\" (Little endian) or \"&gt;\" (Big endian). Required by some built-in named types (multibyte int and floats). charset String Python charsets, e.g. \"utf-8\". Required by all string types. unit String \"s\", \"ms\", \"us\". Optional for ABSOLUTE_TIME, guessed if absent. magic ??? If specified, the field is only valid if its value matches the magic. size int expression Optional for STRING and BYTES fields, the rest of the parsing unit is matched if absent. Short syntax: STRING[expr] size_len int expression Required for UINT_STRING and UINT_BYTES parse_with named Usually used on BYTES or UINT_BYTES fields, causes the value to be parsed as a child parsing unit. This allows to run the child parser with a fixed length, by specifying <code>size</code> or using UINT_BYTES."},{"location":"syntax-reference/#struct","title":"struct","text":"<p>A struct is defined as an ordered list of named field definitions, where each field has a type.</p> <pre><code>struct: \"struct\" params \"{\" (IDENTIFIER type)* \"}\"\n</code></pre> <pre><code>pascal_string struct {\n    length UINT16(endianness=\"&gt;\")\n    value STRING[length](charset=\"utf8\")\n}\n# note: a pascal_string could be defined more easily using the UINT_STRING built-in, as shown above\n</code></pre> <p>If the name of a struct field starts with an underscore, it's contents will be collapsed in the tree view by default.</p>"},{"location":"syntax-reference/#repeat","title":"repeat","text":"<pre><code>repeat: \"repeat\" params type\n</code></pre> <pre><code>int32_array struct(endianness=\"&gt;\") {\n    count UINT16\n    items repeat(times=(count)) INT32\n}\n</code></pre> parameter type description times int expression until int expression until_invalid boolean"},{"location":"syntax-reference/#variant","title":"variant","text":"<pre><code>variant: \"variant\" params \"{\" type* \"}\"\n</code></pre> <pre><code>capture_file variant {\n    pcapng_file(endianness=\"&gt;\")\n    pcapng_file(endianness=\"&lt;\")\n    pcap_file(endianness=\"&gt;\")\n    pcap_file(endianness=\"&lt;\")\n}\n\n</code></pre>"},{"location":"syntax-reference/#switch","title":"switch","text":"<pre><code>switch: \"switch\" expression params \"{\" (\"case\" expression \":\" type)* \"}\"\n</code></pre> <pre><code>my_packet struct {\n    header struct {\n        type UINT8\n    }\n    payload switch (header.type) {\n        case (1): payload_1\n        case (2): payload_2\n    }\n}\n</code></pre>"},{"location":"syntax-reference/#union","title":"union","text":"<pre><code>union: \"union\" params \"{\" (IDENTIFIER type)* \"}\"\n</code></pre> <pre><code>u_s union {\n    unsigned UINT16\n    signed INT16\n}\n</code></pre>"},{"location":"syntax-reference/#bits","title":"bits","text":"<pre><code>bits: \"bits\" params \"{\" (IDENTIFIER \":\" number)* \"}\"\n</code></pre> <pre><code>header bits(endianness=\"&lt;\") {\n    TRX : 15\n    res_1 : 1\n    MID : 10\n    res_2 : 2\n    A : 1\n    SEQ_hi : 3\n    LEN : 15\n    SEQ_lo : 8\n    GROUP : 6\n    res_3 : 3\n}\n</code></pre> parameter type description endianness String \"&lt;\" (Little endian) or \"&gt;\" (Big endian)."},{"location":"syntax-reference/#expressions","title":"Expressions","text":"<p>TODO: describe expression syntax </p>"},{"location":"syntax-reference/#built-in-functions","title":"Built-in functions","text":"<p>Currently, all functions have exactly one parameter.</p> name description hex Returns a hex string representation of the parameter. dec Returns a decimal string representation of the parameter. dotted_quad Returns a dot-separated decimal representation of the bytes passed as a parameter, like in an IPv4 address. ip6 Returns a colon-separated hexadecimal representation, like in an IPv6 or Ethernet address. dec Returns a decimal string representation of the parameter. len Returns the length of the parameter. snip Truncates the parameter to 32 bytes, if longer. pad Returns the number of bytes required to pad the current buffer to a multiple of N bytes."}]}